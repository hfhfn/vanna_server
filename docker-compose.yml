version: '3.8'
name: dify

services:
  vanna-server:
    # 这一堆代码是为了解决容器内进程数限制的问题
#    deploy:
#      resources:
#        limits:
#          pids: -1
#    ulimits:
#      nproc: 65535
#      nofile: 65535
#    privileged: true
    build:
      context: .
      dockerfile: Dockerfile
    container_name: vanna-server  # 容器名称
    # ports:
      # - "5000:5000"
    expose:
      - 5000
    # volumes:
      # - ./output:/app/output
      # - ./temp:/app/temp
    volumes:
      - ../:/app  # 挂载本地代码目录到容器中（方便开发调试）,挂载父目录方便输出文件保存在output文件夹
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=development  # 设置开发模式，以便代码自动重载
    restart: always  # 容器崩溃时自动重启
    command: flask run --host=0.0.0.0 --port=5000
    # 这里因为挂载目录是在容器启动时也就是docker compose up时挂载的，而且会覆盖dockerfile中的同名目录，
    # 而Dockerfile中npm install是在容器构建时安装依赖，也就是docker compose build时安装依赖,
    # 这时挂载目录还不存在，会找不到package.json文件，即使安装成功，也会被覆盖掉，所以需要在容器启动时安装依赖
    # 也就是在compose中指定命令，而不是在Dockerfile中指定命令
    # 其他尝试用过的包 jsdom html2canvas jspdf canvas markmap-lib
#    command: >  # >符号，多行内容合并为单行，换行符会被替换为空格
#      sh -c "npm install -g markmap-cli && npm install express multer &&
#             node src/index.js"
    networks:
      - dify  # 使用 dify 网络

networks:
  dify:
    external: true  # 使用外部网络